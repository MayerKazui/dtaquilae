import {
  AngleDoubleLeftIcon,
  AngleDoubleRightIcon,
  AngleLeftIcon
} from "./chunk-7ORVCT6E.js";
import {
  SearchIcon
} from "./chunk-LLBW55HB.js";
import {
  AngleUpIcon
} from "./chunk-E4SV5KNY.js";
import {
  AngleRightIcon
} from "./chunk-OUZIVCDE.js";
import {
  AngleDownIcon
} from "./chunk-XEVLFSNP.js";
import {
  Button
} from "./chunk-FHXDDZWV.js";
import "./chunk-L3MEHC5Z.js";
import "./chunk-3ADBJG7L.js";
import {
  Ripple
} from "./chunk-2LJSNDGN.js";
import "./chunk-UZIARVHZ.js";
import "./chunk-NL3YCHMG.js";
import {
  IconBase
} from "./chunk-JXXJRN3S.js";
import {
  ComponentBase,
  useHandleStyle,
  useMatchMedia,
  useMergeProps,
  useUpdateEffect
} from "./chunk-5RZC2DUB.js";
import {
  DomHandler,
  FilterService,
  IconUtils,
  ObjectUtils,
  PrimeReact,
  PrimeReactContext,
  UniqueComponentId,
  ariaLabel,
  classNames
} from "./chunk-J5TCD6ZR.js";
import {
  require_react
} from "./chunk-PURSSOPN.js";
import {
  __toESM
} from "./chunk-OZI5HTJH.js";

// node_modules/primereact/picklist/picklist.esm.js
var React3 = __toESM(require_react());

// node_modules/primereact/icons/angledoubledown/index.esm.js
var React = __toESM(require_react());
"use client";
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AngleDoubleDownIcon = React.memo(React.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React.createElement("svg", _extends({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.70786 6.59831C6.80043 6.63674 6.89974 6.65629 6.99997 6.65581C7.19621 6.64081 7.37877 6.54953 7.50853 6.40153L11.0685 2.8416C11.1364 2.69925 11.1586 2.53932 11.132 2.38384C11.1053 2.22837 11.0311 2.08498 10.9195 1.97343C10.808 1.86188 10.6646 1.78766 10.5091 1.76099C10.3536 1.73431 10.1937 1.75649 10.0513 1.82448L6.99997 4.87585L3.9486 1.82448C3.80625 1.75649 3.64632 1.73431 3.49084 1.76099C3.33536 1.78766 3.19197 1.86188 3.08043 1.97343C2.96888 2.08498 2.89466 2.22837 2.86798 2.38384C2.84131 2.53932 2.86349 2.69925 2.93147 2.8416L6.46089 6.43205C6.53132 6.50336 6.61528 6.55989 6.70786 6.59831ZM6.70786 12.1925C6.80043 12.2309 6.89974 12.2505 6.99997 12.25C7.10241 12.2465 7.20306 12.2222 7.29575 12.1785C7.38845 12.1348 7.47124 12.0726 7.53905 11.9957L11.0685 8.46629C11.1614 8.32292 11.2036 8.15249 11.1881 7.98233C11.1727 7.81216 11.1005 7.6521 10.9833 7.52781C10.866 7.40353 10.7104 7.3222 10.5415 7.29688C10.3725 7.27155 10.1999 7.30369 10.0513 7.38814L6.99997 10.4395L3.9486 7.38814C3.80006 7.30369 3.62747 7.27155 3.45849 7.29688C3.28951 7.3222 3.13393 7.40353 3.01667 7.52781C2.89942 7.6521 2.82729 7.81216 2.81184 7.98233C2.79639 8.15249 2.83852 8.32292 2.93148 8.46629L6.4609 12.0262C6.53133 12.0975 6.61529 12.1541 6.70786 12.1925Z",
    fill: "currentColor"
  }));
}));
AngleDoubleDownIcon.displayName = "AngleDoubleDownIcon";

// node_modules/primereact/icons/angledoubleup/index.esm.js
var React2 = __toESM(require_react());
"use client";
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var AngleDoubleUpIcon = React2.memo(React2.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React2.createElement("svg", _extends2({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React2.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.1504 6.67719C10.2417 6.71508 10.3396 6.73436 10.4385 6.73389C10.6338 6.74289 10.8249 6.67441 10.97 6.54334C11.1109 6.4023 11.19 6.21112 11.19 6.01178C11.19 5.81245 11.1109 5.62127 10.97 5.48023L7.45977 1.96998C7.31873 1.82912 7.12755 1.75 6.92821 1.75C6.72888 1.75 6.5377 1.82912 6.39666 1.96998L2.9165 5.45014C2.83353 5.58905 2.79755 5.751 2.81392 5.91196C2.83028 6.07293 2.89811 6.22433 3.00734 6.34369C3.11656 6.46306 3.26137 6.54402 3.42025 6.57456C3.57914 6.60511 3.74364 6.5836 3.88934 6.51325L6.89813 3.50446L9.90691 6.51325C9.97636 6.58357 10.0592 6.6393 10.1504 6.67719ZM9.93702 11.9993C10.065 12.1452 10.245 12.2352 10.4385 12.25C10.632 12.2352 10.812 12.1452 10.9399 11.9993C11.0633 11.8614 11.1315 11.6828 11.1315 11.4978C11.1315 11.3128 11.0633 11.1342 10.9399 10.9963L7.48987 7.48609C7.34883 7.34523 7.15765 7.26611 6.95832 7.26611C6.75899 7.26611 6.5678 7.34523 6.42677 7.48609L2.91652 10.9963C2.84948 11.1367 2.82761 11.2944 2.85391 11.4477C2.88022 11.601 2.9534 11.7424 3.06339 11.8524C3.17338 11.9624 3.31477 12.0356 3.46808 12.0619C3.62139 12.0882 3.77908 12.0663 3.91945 11.9993L6.92823 8.99048L9.93702 11.9993Z",
    fill: "currentColor"
  }));
}));
AngleDoubleUpIcon.displayName = "AngleDoubleUpIcon";

// node_modules/primereact/picklist/picklist.esm.js
"use client";
function _readOnlyError(name) {
  throw new TypeError('"' + name + '" is read-only');
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  root: "p-picklist p-component",
  buttons: "p-picklist-buttons p-picklist-transfer-buttons",
  header: "p-picklist-header",
  filterIcon: "p-picklist-filter-icon",
  filter: "p-picklist-filter",
  filterInput: "p-picklist-filter-input p-inputtext p-component",
  filterContainer: "p-picklist-filter-container",
  list: "p-picklist-list",
  listWrapper: "p-picklist-list-wrapper",
  listSourceWrapper: "p-picklist-list-wrapper p-picklist-source-wrapper",
  listTargetWrapper: "p-picklist-list-wrapper p-picklist-target-wrapper",
  listSource: "p-picklist-list p-picklist-source",
  listTarget: "p-picklist-list p-picklist-target",
  item: function item(_ref) {
    var selected = _ref.selected, focused = _ref.focused;
    return classNames("p-picklist-item", {
      "p-highlight": selected,
      "p-focus": focused
    });
  },
  sourceControls: "p-picklist-source-controls p-picklist-buttons",
  targetControls: "p-picklist-target-controls p-picklist-buttons"
};
var styles = "\n@layer primereact {\n    .p-picklist {\n        display: flex;\n    }\n\n    .p-picklist-buttons {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n    }\n\n    .p-picklist-list-wrapper {\n        flex: 1 1 50%;\n    }\n\n    .p-picklist-list {\n        list-style-type: none;\n        margin: 0;\n        padding: 0;\n        overflow: auto;\n        min-height: 12rem;\n        max-height: 24rem;\n    }\n\n    .p-picklist-item {\n        cursor: pointer;\n        overflow: hidden;\n        position: relative;\n    }\n\n    .p-picklist-filter {\n        position: relative;\n    }\n\n    .p-picklist-filter-icon {\n        position: absolute;\n        top: 50%;\n        margin-top: -.5rem;\n    }\n\n    .p-picklist-filter-input {\n        width: 100%;\n    }\n}\n";
var PickListBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "PickList",
    id: null,
    source: null,
    target: null,
    sourceHeader: null,
    targetHeader: null,
    style: null,
    className: null,
    sourceStyle: null,
    targetStyle: null,
    sourceSelection: null,
    targetSelection: null,
    showSourceControls: true,
    showTargetControls: true,
    metaKeySelection: false,
    onFocus: null,
    onBlur: null,
    filter: false,
    filterBy: null,
    filterMatchMode: "contains",
    targetFilterIcon: null,
    sourceFilterIcon: null,
    moveAllToSourceIcon: null,
    moveToSourceIcon: null,
    moveAllToTargetIcon: null,
    moveToTargetIcon: null,
    moveBottomIcon: null,
    moveUpIcon: null,
    moveTopIcon: null,
    moveDownIcon: null,
    filterLocale: void 0,
    sourceFilterValue: null,
    targetFilterValue: null,
    showSourceFilter: true,
    showTargetFilter: true,
    sourceFilterPlaceholder: null,
    targetFilterPlaceholder: null,
    sourceFilterTemplate: null,
    targetFilterTemplate: null,
    tabIndex: 0,
    dataKey: null,
    autoOptionFocus: true,
    focusOnHover: true,
    breakpoint: "960px",
    itemTemplate: null,
    sourceItemTemplate: null,
    targetItemTemplate: null,
    onChange: null,
    onMoveToSource: null,
    onMoveAllToSource: null,
    onMoveToTarget: null,
    onMoveAllToTarget: null,
    onSourceSelectionChange: null,
    onTargetSelectionChange: null,
    onSourceFilterChange: null,
    onTargetFilterChange: null,
    children: void 0
  },
  css: {
    classes,
    styles
  }
});
var PickListControls = React3.memo(function(props) {
  var mergeProps = useMergeProps();
  var ptm = props.ptm, cx = props.cx, unstyled = props.unstyled;
  var moveUpIcon = props.moveUpIcon || React3.createElement(AngleUpIcon, null);
  var moveTopIcon = props.moveTopIcon || React3.createElement(AngleDoubleUpIcon, null);
  var moveDownIcon = props.moveDownIcon || React3.createElement(AngleDownIcon, null);
  var moveBottomIcon = props.moveBottomIcon || React3.createElement(AngleDoubleDownIcon, null);
  var moveDisabled = !props.selection || !props.selection.length;
  var moveUp = function moveUp2(event) {
    var selectedItems = props.selection;
    if (selectedItems && selectedItems.length) {
      var list = _toConsumableArray(props.list);
      for (var i = 0; i < selectedItems.length; i++) {
        var selectedItem = selectedItems[i];
        var selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, list, props.dataKey);
        if (selectedItemIndex !== 0) {
          var movedItem = list[selectedItemIndex];
          var temp = list[selectedItemIndex - 1];
          list[selectedItemIndex - 1] = movedItem;
          list[selectedItemIndex] = temp;
        } else {
          break;
        }
      }
      if (props.onReorder) {
        props.onReorder({
          originalEvent: event,
          value: list,
          direction: "up"
        });
      }
    }
  };
  var moveTop = function moveTop2(event) {
    var selectedItems = props.selection;
    if (selectedItems && selectedItems.length) {
      var list = _toConsumableArray(props.list);
      for (var i = 0; i < selectedItems.length; i++) {
        var selectedItem = selectedItems[i];
        var selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, list, props.dataKey);
        if (selectedItemIndex !== 0) {
          var movedItem = list.splice(selectedItemIndex, 1)[0];
          list.unshift(movedItem);
        } else {
          break;
        }
      }
      if (props.onReorder) {
        props.onReorder({
          originalEvent: event,
          value: list,
          direction: "top"
        });
      }
    }
  };
  var moveDown = function moveDown2(event) {
    var selectedItems = props.selection;
    if (selectedItems && selectedItems.length) {
      var list = _toConsumableArray(props.list);
      for (var i = selectedItems.length - 1; i >= 0; i--) {
        var selectedItem = selectedItems[i];
        var selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, list, props.dataKey);
        if (selectedItemIndex !== list.length - 1) {
          var movedItem = list[selectedItemIndex];
          var temp = list[selectedItemIndex + 1];
          list[selectedItemIndex + 1] = movedItem;
          list[selectedItemIndex] = temp;
        } else {
          break;
        }
      }
      if (props.onReorder) {
        props.onReorder({
          originalEvent: event,
          value: list,
          direction: "down"
        });
      }
    }
  };
  var moveBottom = function moveBottom2(event) {
    var selectedItems = props.selection;
    if (selectedItems && selectedItems.length) {
      var list = _toConsumableArray(props.list);
      for (var i = selectedItems.length - 1; i >= 0; i--) {
        var selectedItem = selectedItems[i];
        var selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, list, props.dataKey);
        if (selectedItemIndex !== list.length - 1) {
          var movedItem = list.splice(selectedItemIndex, 1)[0];
          list.push(movedItem);
        } else {
          break;
        }
      }
      if (props.onReorder) {
        props.onReorder({
          originalEvent: event,
          value: list,
          direction: "bottom"
        });
      }
    }
  };
  var controlsProps = mergeProps({
    className: classNames(props.className, cx("controls"))
  }, ptm("controls", {
    hostName: props.hostName
  }));
  return React3.createElement("div", controlsProps, React3.createElement(Button, {
    disabled: moveDisabled,
    type: "button",
    icon: moveUpIcon,
    onClick: moveUp,
    pt: ptm("moveUpButton"),
    unstyled,
    "aria-label": ariaLabel("moveUp"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveDisabled,
    type: "button",
    icon: moveTopIcon,
    onClick: moveTop,
    pt: ptm("moveTopButton"),
    unstyled,
    "aria-label": ariaLabel("moveTop"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveDisabled,
    type: "button",
    icon: moveDownIcon,
    onClick: moveDown,
    pt: ptm("moveDownButton"),
    unstyled,
    "aria-label": ariaLabel("moveDown"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveDisabled,
    type: "button",
    icon: moveBottomIcon,
    onClick: moveBottom,
    pt: ptm("moveBottomButton"),
    unstyled,
    "aria-label": ariaLabel("moveBottom"),
    __parentMetadata: {
      parent: props.metaData
    }
  }));
});
PickListControls.displayName = "PickListControls";
var PickListItem = React3.memo(function(props) {
  var mergeProps = useMergeProps();
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        selected: props.selected
      }
    });
  };
  var onClick = function onClick2(event) {
    if (props.onClick) {
      props.onClick({
        originalEvent: event,
        value: props.value,
        id: props.id
      });
    }
  };
  var onKeyDown = function onKeyDown2(event) {
    if (props.onKeyDown) {
      props.onKeyDown({
        originalEvent: event,
        value: props.value
      });
    }
  };
  var onMouseDown = function onMouseDown2(event) {
    if (props.onMouseDown) {
      props.onMouseDown(event);
    }
  };
  var onFocus = function onFocus2(event) {
    if (props.onFocus) {
      props.onFocus(event);
    }
  };
  var content = props.template ? props.template(props.value) : props.value;
  var itemProps = mergeProps({
    className: classNames(props.className, cx("item", {
      selected: props.selected,
      focused: props.focused
    })),
    id: props.id,
    onClick,
    onKeyDown,
    onFocus,
    onMouseDown,
    onMouseMove: props.onMouseMove,
    role: "option",
    "aria-selected": props.selected,
    "data-p-highlight": props.selected,
    "data-p-focused": props.focused
  }, getPTOptions("item"));
  return React3.createElement("li", itemProps, content, React3.createElement(Ripple, null));
});
PickListItem.displayName = "PickListItem";
function ownKeys$1(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$1(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PickListSubList = React3.memo(React3.forwardRef(function(props, ref) {
  var mergeProps = useMergeProps();
  var listElementRef = React3.useRef(null);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$1({
      hostName: props.hostName
    }, options));
  };
  var isSelected = function isSelected2(item2) {
    return ObjectUtils.findIndexInList(item2, props.selection, props.dataKey) !== -1;
  };
  var onFilter = function onFilter2(event) {
    if (props.onFilter) {
      props.onFilter({
        originalEvent: event,
        value: event.target.value,
        type: props.type
      });
    }
  };
  var onFilterInputKeyDown = function onFilterInputKeyDown2(event) {
    if (event.which === 13) {
      event.preventDefault();
    }
  };
  React3.useImperativeHandle(ref, function() {
    return {
      getElement: function getElement() {
        return listElementRef.current;
      }
    };
  });
  var createHeader = function createHeader2() {
    var headerProps = mergeProps({
      className: cx("header")
    }, getPTOptions("header"));
    if (props.header) {
      return React3.createElement("div", headerProps, ObjectUtils.getJSXElement(props.header, props));
    }
    return null;
  };
  var changeFocusedItemOnHover = function changeFocusedItemOnHover2(index) {
    if (props.focusOnHover && props.focusedList[props.type]) {
      var _props$changeFocusedO;
      props === null || props === void 0 || (_props$changeFocusedO = props.changeFocusedOptionIndex) === null || _props$changeFocusedO === void 0 || _props$changeFocusedO.call(props, index, props.type);
    }
  };
  var createItems = function createItems2() {
    if (props.list) {
      return props.list.map(function(item2, index) {
        var key = props.parentId + "_" + index;
        var selected = isSelected(item2);
        return React3.createElement(PickListItem, {
          hostName: props.hostName,
          key,
          id: key,
          index,
          focused: key === props.focusedOptionId,
          value: item2,
          template: props.itemTemplate,
          selected,
          onClick: props.onItemClick,
          onKeyDown: props.onItemKeyDown,
          onMouseDown: function onMouseDown(event) {
            return props.onOptionMouseDown(_objectSpread$1(_objectSpread$1({}, event), {}, {
              index,
              type: props.type
            }));
          },
          onMouseMove: function onMouseMove() {
            return changeFocusedItemOnHover(index);
          },
          ptm,
          cx
        });
      });
    }
    return null;
  };
  var createFilter = function createFilter2() {
    var iconClassName = "p-picklist-filter-icon";
    var filterIconProps = mergeProps({
      className: cx("filterIcon")
    }, getPTOptions("filterIcon"));
    var icon = props.type === "source" ? props.sourceFilterIcon || React3.createElement(SearchIcon, filterIconProps) : props.targetFilterIcon || React3.createElement(SearchIcon, filterIconProps);
    var filterIcon = IconUtils.getJSXIcon(icon, _objectSpread$1({}, filterIconProps), {
      props
    });
    if (props.showFilter) {
      var filterProps = mergeProps({
        className: cx("filter")
      }, getPTOptions("filter"));
      var filterInputProps = mergeProps({
        type: "text",
        value: props.filterValue,
        onChange: onFilter,
        onKeyDown: onFilterInputKeyDown,
        placeholder: props.placeholder,
        className: cx("filterInput")
      }, getPTOptions("filterInput"));
      var content = React3.createElement("div", filterProps, React3.createElement("input", filterInputProps), React3.createElement("span", null, " ", filterIcon, " "));
      if (props.filterTemplate) {
        var defaultContentOptions = {
          className: "p-picklist-filter",
          inputProps: {
            className: "p-picklist-filter-input p-inputtext p-component",
            onChange: onFilter,
            onKeyDown: onFilterInputKeyDown
          },
          iconClassName,
          element: content,
          props
        };
        content = ObjectUtils.getJSXElement(props.filterTemplate, defaultContentOptions);
      }
      var filterContainerProps = mergeProps({
        className: cx("filterContainer")
      }, getPTOptions("filterContainer"));
      return React3.createElement("div", filterContainerProps, content);
    }
    return null;
  };
  var createList = function createList2() {
    var items = createItems();
    var listProps = mergeProps({
      ref: listElementRef,
      className: classNames(props.listClassName, cx("list")),
      role: "listbox",
      id: props.parentId + "_" + props.type + "_list",
      "aria-multiselectable": true,
      "aria-activedescendant": props.ariaActivedescendant,
      tabIndex: props.list && props.list.length > 0 ? props.tabIndex : -1,
      onKeyDown: props.onListKeyDown,
      onFocus: function onFocus(event) {
        props.onListFocus(event, props.type);
      },
      onBlur: props.onListBlur,
      style: props.style
    }, getPTOptions("list"));
    return React3.createElement("ul", listProps, items);
  };
  var header = createHeader();
  var filter = createFilter();
  var list = createList();
  var listWrapperProps = mergeProps({
    className: classNames(props.className, cx("listWrapper"))
  }, getPTOptions("listWrapper"));
  return React3.createElement("div", listWrapperProps, header, filter, list);
}));
PickListSubList.displayName = "PickListSubList";
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var FilterMatchMode = Object.freeze({
  STARTS_WITH: "startsWith",
  CONTAINS: "contains",
  NOT_CONTAINS: "notContains",
  ENDS_WITH: "endsWith",
  EQUALS: "equals",
  NOT_EQUALS: "notEquals",
  IN: "in",
  LESS_THAN: "lt",
  LESS_THAN_OR_EQUAL_TO: "lte",
  GREATER_THAN: "gt",
  GREATER_THAN_OR_EQUAL_TO: "gte",
  BETWEEN: "between",
  DATE_IS: "dateIs",
  DATE_IS_NOT: "dateIsNot",
  DATE_BEFORE: "dateBefore",
  DATE_AFTER: "dateAfter",
  CUSTOM: "custom"
});
var PrimeReact2 = _createClass(function PrimeReact3() {
  _classCallCheck(this, PrimeReact3);
});
_defineProperty(PrimeReact2, "ripple", false);
_defineProperty(PrimeReact2, "inputStyle", "outlined");
_defineProperty(PrimeReact2, "locale", "en");
_defineProperty(PrimeReact2, "appendTo", null);
_defineProperty(PrimeReact2, "cssTransition", true);
_defineProperty(PrimeReact2, "autoZIndex", true);
_defineProperty(PrimeReact2, "hideOverlaysOnDocumentScrolling", false);
_defineProperty(PrimeReact2, "nonce", null);
_defineProperty(PrimeReact2, "nullSortOrder", 1);
_defineProperty(PrimeReact2, "zIndex", {
  modal: 1100,
  overlay: 1e3,
  menu: 1e3,
  tooltip: 1100,
  toast: 1200
});
_defineProperty(PrimeReact2, "pt", void 0);
_defineProperty(PrimeReact2, "filterMatchModeOptions", {
  text: [FilterMatchMode.STARTS_WITH, FilterMatchMode.CONTAINS, FilterMatchMode.NOT_CONTAINS, FilterMatchMode.ENDS_WITH, FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS],
  numeric: [FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS, FilterMatchMode.LESS_THAN, FilterMatchMode.LESS_THAN_OR_EQUAL_TO, FilterMatchMode.GREATER_THAN, FilterMatchMode.GREATER_THAN_OR_EQUAL_TO],
  date: [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_IS_NOT, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_AFTER]
});
_defineProperty(PrimeReact2, "changeTheme", function(currentTheme, newTheme, linkElementId, callback) {
  var _linkElement$parentNo;
  var linkElement = document.getElementById(linkElementId);
  var cloneLinkElement = linkElement.cloneNode(true);
  var newThemeUrl = linkElement.getAttribute("href").replace(currentTheme, newTheme);
  cloneLinkElement.setAttribute("id", linkElementId + "-clone");
  cloneLinkElement.setAttribute("href", newThemeUrl);
  cloneLinkElement.addEventListener("load", function() {
    linkElement.remove();
    cloneLinkElement.setAttribute("id", linkElementId);
    if (callback) {
      callback();
    }
  });
  (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.insertBefore(cloneLinkElement, linkElement.nextSibling);
});
var locales = {
  en: {
    accept: "Yes",
    addRule: "Add Rule",
    am: "AM",
    apply: "Apply",
    cancel: "Cancel",
    choose: "Choose",
    chooseDate: "Choose Date",
    chooseMonth: "Choose Month",
    chooseYear: "Choose Year",
    clear: "Clear",
    completed: "Completed",
    contains: "Contains",
    custom: "Custom",
    dateAfter: "Date is after",
    dateBefore: "Date is before",
    dateFormat: "mm/dd/yy",
    dateIs: "Date is",
    dateIsNot: "Date is not",
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    emptyFilterMessage: "No results found",
    emptyMessage: "No available options",
    emptySearchMessage: "No results found",
    emptySelectionMessage: "No selected item",
    endsWith: "Ends with",
    equals: "Equals",
    fileSizeTypes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
    filter: "Filter",
    firstDayOfWeek: 0,
    gt: "Greater than",
    gte: "Greater than or equal to",
    lt: "Less than",
    lte: "Less than or equal to",
    matchAll: "Match All",
    matchAny: "Match Any",
    medium: "Medium",
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    nextDecade: "Next Decade",
    nextHour: "Next Hour",
    nextMinute: "Next Minute",
    nextMonth: "Next Month",
    nextSecond: "Next Second",
    nextYear: "Next Year",
    noFilter: "No Filter",
    notContains: "Not contains",
    notEquals: "Not equals",
    now: "Now",
    passwordPrompt: "Enter a password",
    pending: "Pending",
    pm: "PM",
    prevDecade: "Previous Decade",
    prevHour: "Previous Hour",
    prevMinute: "Previous Minute",
    prevMonth: "Previous Month",
    prevSecond: "Previous Second",
    prevYear: "Previous Year",
    reject: "No",
    removeRule: "Remove Rule",
    searchMessage: "{0} results are available",
    selectionMessage: "{0} items selected",
    showMonthAfterYear: false,
    startsWith: "Starts with",
    strong: "Strong",
    today: "Today",
    upload: "Upload",
    weak: "Weak",
    weekHeader: "Wk",
    aria: {
      cancelEdit: "Cancel Edit",
      close: "Close",
      collapseRow: "Row Collapsed",
      editRow: "Edit Row",
      expandRow: "Row Expanded",
      falseLabel: "False",
      filterConstraint: "Filter Constraint",
      filterOperator: "Filter Operator",
      firstPageLabel: "First Page",
      gridView: "Grid View",
      hideFilterMenu: "Hide Filter Menu",
      jumpToPageDropdownLabel: "Jump to Page Dropdown",
      jumpToPageInputLabel: "Jump to Page Input",
      lastPageLabel: "Last Page",
      listView: "List View",
      moveAllToSource: "Move All to Source",
      moveAllToTarget: "Move All to Target",
      moveBottom: "Move Bottom",
      moveDown: "Move Down",
      moveToSource: "Move to Source",
      moveToTarget: "Move to Target",
      moveTop: "Move Top",
      moveUp: "Move Up",
      navigation: "Navigation",
      next: "Next",
      nextPageLabel: "Next Page",
      nullLabel: "Not Selected",
      pageLabel: "Page {page}",
      otpLabel: "Please enter one time password character {0}",
      passwordHide: "Hide Password",
      passwordShow: "Show Password",
      previous: "Previous",
      previousPageLabel: "Previous Page",
      rotateLeft: "Rotate Left",
      rotateRight: "Rotate Right",
      rowsPerPageLabel: "Rows per page",
      saveEdit: "Save Edit",
      scrollTop: "Scroll Top",
      selectAll: "All items selected",
      selectRow: "Row Selected",
      showFilterMenu: "Show Filter Menu",
      slide: "Slide",
      slideNumber: "{slideNumber}",
      star: "1 star",
      stars: "{star} stars",
      trueLabel: "True",
      unselectAll: "All items unselected",
      unselectRow: "Row Unselected",
      zoomImage: "Zoom Image",
      zoomIn: "Zoom In",
      zoomOut: "Zoom Out"
    }
  }
};
function ariaLabel2(ariaKey, options) {
  if (ariaKey.includes("__proto__") || ariaKey.includes("prototype")) {
    throw new Error("Unsafe ariaKey detected");
  }
  var _locale = PrimeReact2.locale;
  try {
    var _ariaLabel = localeOptions(_locale).aria[ariaKey];
    if (_ariaLabel) {
      for (var key in options) {
        if (options.hasOwnProperty(key)) {
          _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options[key]);
        }
      }
    }
    return _ariaLabel;
  } catch (error) {
    throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
  }
}
function localeOptions(locale) {
  var _locale = locale || PrimeReact2.locale;
  if (_locale.includes("__proto__") || _locale.includes("prototype")) {
    throw new Error("Unsafe locale detected");
  }
  return locales[_locale];
}
var PickListTransferControls = React3.memo(function(props) {
  var mergeProps = useMergeProps();
  var viewChanged = useMatchMedia("(max-width: ".concat(props.breakpoint, ")"), props.breakpoint);
  var ptm = props.ptm, cx = props.cx, unstyled = props.unstyled;
  function getIconComponent(iconType) {
    switch (iconType) {
      case "moveToTargetIcon":
        return props.moveToTargetIcon || viewChanged ? props.moveToTargetIcon || React3.createElement(AngleDownIcon, null) : props.moveToTargetIcon || React3.createElement(AngleRightIcon, null);
      case "moveAllToTargetIcon":
        return props.moveAllToTargetIcon || viewChanged ? props.moveAllToTargetIcon || React3.createElement(AngleDoubleDownIcon, null) : props.moveAllToTargetIcon || React3.createElement(AngleDoubleRightIcon, null);
      case "moveToSourceIcon":
        return props.moveToSourceIcon || viewChanged ? props.moveToSourceIcon || React3.createElement(AngleUpIcon, null) : props.moveToSourceIcon || React3.createElement(AngleLeftIcon, null);
      case "moveAllToSourceIcon":
        return props.moveAllToSourceIcon || viewChanged ? props.moveAllToSourceIcon || React3.createElement(AngleDoubleUpIcon, null) : props.moveAllToSourceIcon || React3.createElement(AngleDoubleLeftIcon, null);
      default:
        return null;
    }
  }
  var moveToTargetIcon = IconUtils.getJSXIcon(getIconComponent("moveToTargetIcon"), void 0, {
    props,
    viewChanged
  });
  var moveAllToTargetIcon = IconUtils.getJSXIcon(getIconComponent("moveAllToTargetIcon"), void 0, {
    props,
    viewChanged
  });
  var moveToSourceIcon = IconUtils.getJSXIcon(getIconComponent("moveToSourceIcon"), void 0, {
    props,
    viewChanged
  });
  var moveAllToSourceIcon = IconUtils.getJSXIcon(getIconComponent("moveAllToSourceIcon"), void 0, {
    props,
    viewChanged
  });
  var moveRightDisabled = ObjectUtils.isEmpty(props.sourceSelection) || ObjectUtils.isEmpty(props.visibleSourceList);
  var moveLeftDisabled = ObjectUtils.isEmpty(props.targetSelection) || ObjectUtils.isEmpty(props.visibleTargetList);
  var moveAllRightDisabled = ObjectUtils.isEmpty(props.visibleSourceList);
  var moveAllLeftDisabled = ObjectUtils.isEmpty(props.visibleTargetList);
  var moveRight = function moveRight2(event) {
    var selection = props.sourceSelection;
    if (ObjectUtils.isNotEmpty(selection)) {
      var targetList = _toConsumableArray(props.target);
      var sourceList = _toConsumableArray(props.source);
      for (var i = 0; i < selection.length; i++) {
        var selectedItem = selection[i];
        if (ObjectUtils.findIndexInList(selectedItem, targetList, props.dataKey) === -1) {
          targetList.push(sourceList.splice(ObjectUtils.findIndexInList(selectedItem, sourceList, props.dataKey), 1)[0]);
        }
      }
      if (props.onTransfer) {
        props.onTransfer({
          originalEvent: event,
          source: sourceList,
          target: targetList,
          direction: "toTarget"
        });
      }
    }
  };
  var moveAllRight = function moveAllRight2(event) {
    if (props.source) {
      var targetList = [].concat(_toConsumableArray(props.target), _toConsumableArray(props.visibleSourceList));
      var sourceList = props.source.filter(function(s) {
        return !props.visibleSourceList.some(function(vs) {
          return vs === s;
        });
      });
      if (props.onTransfer) {
        props.onTransfer({
          originalEvent: event,
          source: sourceList,
          target: targetList,
          direction: "allToTarget"
        });
      }
    }
  };
  var moveLeft = function moveLeft2(event) {
    var selection = props.targetSelection;
    if (ObjectUtils.isNotEmpty(selection)) {
      var targetList = _toConsumableArray(props.target);
      var sourceList = _toConsumableArray(props.source);
      for (var i = 0; i < selection.length; i++) {
        var selectedItem = selection[i];
        if (ObjectUtils.findIndexInList(selectedItem, sourceList, props.dataKey) === -1) {
          sourceList.push(targetList.splice(ObjectUtils.findIndexInList(selectedItem, targetList, props.dataKey), 1)[0]);
        }
      }
      if (props.onTransfer) {
        props.onTransfer({
          originalEvent: event,
          source: sourceList,
          target: targetList,
          direction: "toSource"
        });
      }
    }
  };
  var moveAllLeft = function moveAllLeft2(event) {
    if (props.source) {
      var sourceList = [].concat(_toConsumableArray(props.source), _toConsumableArray(props.visibleTargetList));
      var targetList = props.target.filter(function(t) {
        return !props.visibleTargetList.some(function(vt) {
          return vt === t;
        });
      });
      if (props.onTransfer) {
        props.onTransfer({
          originalEvent: event,
          source: sourceList,
          target: targetList,
          direction: "allToSource"
        });
      }
    }
  };
  var buttonsProps = mergeProps({
    className: classNames(props.className, cx("buttons"))
  }, ptm("buttons", {
    hostName: props.hostName
  }));
  return React3.createElement("div", buttonsProps, React3.createElement(Button, {
    disabled: moveRightDisabled,
    type: "button",
    icon: moveToTargetIcon,
    onClick: moveRight,
    pt: ptm("moveToTargetButton"),
    unstyled,
    "aria-label": ariaLabel2("moveToTarget"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveAllRightDisabled,
    type: "button",
    icon: moveAllToTargetIcon,
    onClick: moveAllRight,
    pt: ptm("moveAllToTargetButton"),
    unstyled,
    "aria-label": ariaLabel2("moveAllToTarget"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveLeftDisabled,
    type: "button",
    icon: moveToSourceIcon,
    onClick: moveLeft,
    pt: ptm("moveToSourceButton"),
    unstyled,
    "aria-label": ariaLabel2("moveToSource"),
    __parentMetadata: {
      parent: props.metaData
    }
  }), React3.createElement(Button, {
    disabled: moveAllLeftDisabled,
    type: "button",
    icon: moveAllToSourceIcon,
    onClick: moveAllLeft,
    pt: ptm("moveAllToSourceButton"),
    unstyled,
    "aria-label": ariaLabel2("moveAllToSource"),
    __parentMetadata: {
      parent: props.metaData
    }
  }));
});
PickListTransferControls.displayName = "PickListTransferControls";
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PickList = React3.memo(React3.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React3.useContext(PrimeReactContext);
  var props = PickListBase.getProps(inProps, context);
  var _React$useState = React3.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), sourceSelectionState = _React$useState2[0], setSourceSelectionState = _React$useState2[1];
  var _React$useState3 = React3.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), targetSelectionState = _React$useState4[0], setTargetSelectionState = _React$useState4[1];
  var _React$useState5 = React3.useState(""), _React$useState6 = _slicedToArray(_React$useState5, 2), sourceFilterValueState = _React$useState6[0], setSourceFilterValueState = _React$useState6[1];
  var _React$useState7 = React3.useState(""), _React$useState8 = _slicedToArray(_React$useState7, 2), targetFilterValueState = _React$useState8[0], setTargetFilterValueState = _React$useState8[1];
  var _React$useState9 = React3.useState(props.id), _React$useState10 = _slicedToArray(_React$useState9, 2), attributeSelectorState = _React$useState10[0], setAttributeSelectorState = _React$useState10[1];
  var _React$useState11 = React3.useState(-1), _React$useState12 = _slicedToArray(_React$useState11, 2), focusedOptionIndex = _React$useState12[0], setFocusedOptionIndex = _React$useState12[1];
  var _React$useState13 = React3.useState(null), _React$useState14 = _slicedToArray(_React$useState13, 2), focusedOptionId = _React$useState14[0], setFocusedOptionId = _React$useState14[1];
  var _React$useState15 = React3.useState({
    source: false,
    target: false
  }), _React$useState16 = _slicedToArray(_React$useState15, 2), focused = _React$useState16[0], setFocused = _React$useState16[1];
  var metaData = {
    props,
    state: {
      sourceSelection: sourceSelectionState,
      targetSelection: targetSelectionState,
      sourceFilterValue: sourceFilterValueState,
      targetFilterValue: targetFilterValueState,
      attributeSelector: attributeSelectorState
    }
  };
  var _PickListBase$setMeta = PickListBase.setMetaData(metaData), ptm = _PickListBase$setMeta.ptm, cx = _PickListBase$setMeta.cx, isUnstyled = _PickListBase$setMeta.isUnstyled;
  useHandleStyle(PickListBase.css.styles, isUnstyled, {
    name: "picklist"
  });
  var elementRef = React3.useRef(null);
  var sourceListElementRef = React3.useRef(null);
  var targetListElementRef = React3.useRef(null);
  var reorderedListElementRef = React3.useRef(null);
  var reorderDirection = React3.useRef(null);
  var styleElementRef = React3.useRef(null);
  var sourceSelection = props.sourceSelection ? props.sourceSelection : sourceSelectionState;
  var targetSelection = props.targetSelection ? props.targetSelection : targetSelectionState;
  var sourceFilteredValue = props.onSourceFilterChange ? props.sourceFilterValue : sourceFilterValueState;
  var targetFilteredValue = props.onTargetFilterChange ? props.targetFilterValue : targetFilterValueState;
  var hasFilterBy = ObjectUtils.isNotEmpty(props.filterBy);
  var showSourceFilter = hasFilterBy && props.showSourceFilter;
  var showTargetFilter = hasFilterBy && props.showTargetFilter;
  var onSourceReorder = function onSourceReorder2(event) {
    handleChange(event, event.value, props.target);
    reorderedListElementRef.current = getListElement("source");
    reorderDirection.current = event.direction;
  };
  var onTargetReorder = function onTargetReorder2(event) {
    handleChange(event, props.source, event.value);
    reorderedListElementRef.current = getListElement("target");
    reorderDirection.current = event.direction;
  };
  var handleScrollPosition = function handleScrollPosition2(listElement, direction) {
    if (listElement) {
      switch (direction) {
        case "up":
          scrollInView(listElement, -1);
          break;
        case "top":
          listElement.scrollTop = 0;
          break;
        case "down":
          scrollInView(listElement, 1);
          break;
        case "bottom":
          setTimeout(function() {
            return listElement.scrollTop = listElement.scrollHeight;
          }, 100);
          break;
      }
    }
  };
  var handleChange = function handleChange2(event, source, target) {
    if (props.onChange) {
      props.onChange({
        originalEvent: event.originalEvent,
        source,
        target
      });
    }
  };
  var onTransfer = function onTransfer2(event) {
    var originalEvent = event.originalEvent, source = event.source, target = event.target, direction = event.direction;
    var selectedValue = [];
    switch (direction) {
      case "toTarget":
        selectedValue = sourceSelection;
        if (props.onMoveToTarget) {
          props.onMoveToTarget({
            originalEvent,
            value: selectedValue
          });
        }
        break;
      case "allToTarget":
        selectedValue = props.source;
        if (props.onMoveAllToTarget) {
          props.onMoveAllToTarget({
            originalEvent,
            value: selectedValue
          });
        }
        selectedValue = [];
        break;
      case "toSource":
        selectedValue = targetSelection;
        if (props.onMoveToSource) {
          props.onMoveToSource({
            originalEvent,
            value: selectedValue
          });
        }
        break;
      case "allToSource":
        selectedValue = props.target;
        if (props.onMoveAllToSource) {
          props.onMoveAllToSource({
            originalEvent,
            value: selectedValue
          });
        }
        selectedValue = [];
        break;
    }
    _onSelectionChange({
      originalEvent,
      value: selectedValue
    }, "sourceSelection", props.onSourceSelectionChange);
    _onSelectionChange({
      originalEvent,
      value: selectedValue
    }, "targetSelection", props.onTargetSelectionChange);
    handleChange(event, source, target);
  };
  var scrollInView = function scrollInView2(listContainer) {
    var direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var selectedItems = listContainer.getElementsByClassName("p-highlight");
    if (ObjectUtils.isNotEmpty(selectedItems)) {
      DomHandler.scrollInView(listContainer, direction === -1 ? selectedItems[0] : selectedItems[selectedItems.length - 1]);
    }
  };
  var _onSelectionChange = function onSelectionChange(e, stateKey, callback) {
    if (stateKey === "sourceSelection") {
      setSourceSelectionState(e.value);
    } else {
      setTargetSelectionState(e.value);
    }
    if (callback) {
      callback(e);
    }
    if (ObjectUtils.isNotEmpty(sourceSelection) && stateKey === "targetSelection") {
      setSourceSelectionState([]);
    } else if (ObjectUtils.isNotEmpty(targetSelection) && stateKey === "sourceSelection") {
      setTargetSelectionState([]);
    }
  };
  var onFilter = function onFilter2(event) {
    var originalEvent = event.originalEvent, value = event.value, type = event.type;
    var _ref = type === "source" ? [setSourceFilterValueState, props.onSourceFilterChange] : [setTargetFilterValueState, props.onTargetFilterChange], _ref2 = _slicedToArray(_ref, 2), setFilterState = _ref2[0], onFilterChange = _ref2[1];
    if (onFilterChange) {
      onFilterChange({
        originalEvent,
        value
      });
    } else {
      setFilterState(value);
    }
  };
  var filterSource = function filterSource2() {
    var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var filteredValue = value.trim().toLocaleLowerCase(props.filterLocale);
    return filter(props.source, filteredValue);
  };
  var filterTarget = function filterTarget2() {
    var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var filteredValue = value.trim().toLocaleLowerCase(props.filterLocale);
    return filter(props.target, filteredValue);
  };
  var filter = function filter2(list, filterValue) {
    var searchFields = hasFilterBy ? props.filterBy.split(",") : [];
    return FilterService.filter(list, searchFields, filterValue, props.filterMatchMode, props.filterLocale);
  };
  var getVisibleList = function getVisibleList2(list, type) {
    var _ref3 = type === "source" ? [sourceFilteredValue, filterSource] : [targetFilteredValue, filterTarget], _ref4 = _slicedToArray(_ref3, 2), filteredValue = _ref4[0], filterCallback = _ref4[1];
    return hasFilterBy && ObjectUtils.isNotEmpty(filteredValue) ? filterCallback(filteredValue) : list;
  };
  var sourceList = getVisibleList(props.source, "source");
  var targetList = getVisibleList(props.target, "target");
  var findCurrentFocusedIndex = function findCurrentFocusedIndex2(listElement) {
    if (focusedOptionIndex === -1) {
      var itemList = listElement && listElement.children ? _toConsumableArray(listElement.children) : [];
      var selectedOptionIndex = findFirstSelectedOptionIndex(listElement, itemList);
      if (props.autoOptionFocus && selectedOptionIndex === -1) {
        selectedOptionIndex = findFirstFocusedOptionIndex(listElement, itemList);
      }
      return selectedOptionIndex;
    }
    return -1;
  };
  var findFirstSelectedOptionIndex = function findFirstSelectedOptionIndex2(listElement, itemList) {
    if (sourceSelectionState.length || targetSelectionState.length) {
      var selectedFirstItem = DomHandler.findSingle(listElement, '[data-p-highlight="true"]');
      return ObjectUtils.findIndexInList(selectedFirstItem, itemList);
    }
    return -1;
  };
  var findFirstFocusedOptionIndex = function findFirstFocusedOptionIndex2(listElement, itemList) {
    var firstFocusableItem = DomHandler.findSingle(listElement, '[data-pc-section="item"]');
    return ObjectUtils.findIndexInList(firstFocusableItem, itemList);
  };
  var _onListFocus = function onListFocus(event, type) {
    setFocused(_objectSpread(_objectSpread({}, focused), {}, _defineProperty({}, type, true)));
    var listElement = getListElement(type);
    var currentFocusedIndex = findCurrentFocusedIndex(listElement);
    changeFocusedOptionIndex(currentFocusedIndex, type);
    props.onFocus && props.onFocus(event);
  };
  var _onListBlur = function onListBlur(event, type) {
    setFocused(_objectSpread(_objectSpread({}, focused), {}, _defineProperty({}, type, false)));
    setFocusedOptionIndex(-1);
    props.onBlur && props.onBlur(event);
  };
  var _onItemClick = function onItemClick(event, type) {
    var arrowKeyClick = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var originalEvent = event.originalEvent;
    var item2 = event.value;
    var selectedId = event.id;
    var isSource = type === "source";
    var selection = _toConsumableArray(isSource ? sourceSelection : targetSelection);
    var index = ObjectUtils.findIndexInList(item2, selection, props.dataKey);
    var selected = index !== -1;
    var metaSelection = props.metaKeySelection;
    if (!arrowKeyClick) {
      setFocusedOptionIndex(selectedId);
    }
    if (metaSelection) {
      var metaKey = originalEvent.metaKey || originalEvent.ctrlKey || originalEvent.shiftKey;
      if (selected && metaKey) {
        selection.splice(index, 1);
      } else {
        if (!metaKey) {
          selection.length = 0;
        }
        selection.push(item2);
      }
    } else if (selected) {
      selection.splice(index, 1);
    } else {
      selection.push(item2);
    }
    if (isSource) {
      _onSelectionChange({
        originalEvent,
        value: selection
      }, "sourceSelection", props.onSourceSelectionChange);
    } else {
      _onSelectionChange({
        originalEvent,
        value: selection
      }, "targetSelection", props.onTargetSelectionChange);
    }
  };
  var _onOptionMouseDown = function onOptionMouseDown(_ref5) {
    var index = _ref5.index, type = _ref5.type;
    setFocused(_objectSpread(_objectSpread({}, focused), {}, _defineProperty({}, type, true)));
    setFocusedOptionIndex(index);
  };
  var _onListKeyDown = function onListKeyDown(event, type) {
    switch (event.code) {
      case "ArrowDown":
        onArrowDownKey(event, type);
        break;
      case "ArrowUp":
        onArrowUpKey(event, type);
        break;
      case "Home":
        onHomeKey(event, type);
        break;
      case "End":
        onEndKey(event, type);
        break;
      case "Enter":
      case "NumpadEnter":
        onEnterKey(event, type);
        break;
      case "Space":
        onSpaceKey(event, type);
        break;
      case "KeyA":
        if (event.ctrlKey) {
          var isSource = type === "source";
          if (isSource) {
            setSourceSelectionState(_toConsumableArray(sourceList));
          } else {
            setTargetSelectionState(_toConsumableArray(targetList));
          }
          _onSelectionChange({
            originalEvent: event,
            value: _toConsumableArray(sourceList)
          }, isSource ? "sourceSelection" : "targetSelection", isSource ? props.onSourceSelectionChange : props.onTargetSelectionChange);
          event.preventDefault();
        }
    }
  };
  var onArrowDownKey = function onArrowDownKey2(event, type) {
    var optionIndex = findNextOptionIndex(focusedOptionIndex, type);
    var visibleList = getVisibleList(type === "source" ? props.source : props.target, type);
    changeFocusedOptionIndex(optionIndex, type);
    if (visibleList && visibleList.length > 0 && event.shiftKey) {
      _onItemClick({
        originalEvent: event,
        value: visibleList[optionIndex]
      }, type, true);
    }
    event.preventDefault();
  };
  var onArrowUpKey = function onArrowUpKey2(event, type) {
    var optionIndex = findPrevOptionIndex(focusedOptionIndex, type);
    var visibleList = getVisibleList(type === "source" ? props.source : props.target, type);
    changeFocusedOptionIndex(optionIndex, type);
    if (visibleList && visibleList.length > 0 && event.shiftKey) {
      _onItemClick({
        originalEvent: event,
        value: visibleList[optionIndex]
      }, type, true);
    }
    event.preventDefault();
  };
  var onEnterKey = function onEnterKey2(event, type) {
    var listElement = getListElement(type);
    var visibleList = getVisibleList(type === "source" ? props.source : props.target, type);
    var items = DomHandler.find(listElement, '[data-pc-section="item"]');
    var focusedItem = DomHandler.findSingle(listElement, '[data-pc-section="item"][id='.concat(focusedOptionIndex, "]"));
    var id = focusedItem && focusedItem.getAttribute("id");
    var matchedOptionIndex = _toConsumableArray(items).findIndex(function(item2) {
      return item2 === focusedItem;
    });
    if (visibleList && visibleList.length > 0) {
      _onItemClick({
        originalEvent: event,
        value: visibleList[matchedOptionIndex],
        id
      }, type);
    }
    event.preventDefault();
  };
  var onSpaceKey = function onSpaceKey2(event, type) {
    event.preventDefault();
    var isSource = type === "source";
    var selection = isSource ? sourceSelectionState : targetSelectionState;
    if (event.shiftKey && selection && selection.length > 0) {
      var listItems = isSource ? sourceList : targetList;
      var listElement = getListElement(type);
      var items = DomHandler.find(listElement, '[data-pc-section="item"]');
      var selectedItemIndex = ObjectUtils.findIndexInList(selection[0], _toConsumableArray(listItems));
      var focusedItem = DomHandler.findSingle(listElement, '[data-pc-section="item"][id='.concat(focusedOptionIndex, "]"));
      var matchedOptionIndex = _toConsumableArray(items).findIndex(function(item2) {
        return item2 === focusedItem;
      });
      _toConsumableArray(listItems).slice(Math.min(selectedItemIndex, matchedOptionIndex), Math.max(selectedItemIndex, matchedOptionIndex) + 1), _readOnlyError("selection");
      if (isSource) {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "sourceSelection", props.onSourceSelectionChange);
      } else {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "targetSelection", props.onTargetSelectionChange);
      }
    } else {
      onEnterKey(event, type);
    }
  };
  var onHomeKey = function onHomeKey2(event, type) {
    if (event.ctrlKey && event.shiftKey) {
      var isSource = type === "source";
      var listItems = isSource ? sourceList : targetList;
      var listElement = getListElement(type);
      var items = DomHandler.find(listElement, '[data-pc-section="item"]');
      var focusedItem = DomHandler.findSingle(listElement, '[data-pc-section="item"][id='.concat(focusedOptionIndex, "]"));
      var matchedOptionIndex = _toConsumableArray(items).findIndex(function(item2) {
        return item2 === focusedItem;
      });
      var selection = _toConsumableArray(listItems).slice(0, matchedOptionIndex + 1);
      if (isSource) {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "sourceSelection", props.onSourceSelectionChange);
      } else {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "targetSelection", props.onTargetSelectionChange);
      }
    } else {
      changeFocusedOptionIndex(0, type);
    }
    event.preventDefault();
  };
  var onEndKey = function onEndKey2(event, type) {
    var listElement = getListElement(type);
    var items = DomHandler.find(listElement, '[data-pc-section="item"]');
    if (event.ctrlKey && event.shiftKey) {
      var isSource = type === "source";
      var listItems = isSource ? sourceList : targetList;
      var focusedItem = DomHandler.findSingle(listElement, '[data-pc-section="item"][id='.concat(focusedOptionIndex, "]"));
      var matchedOptionIndex = _toConsumableArray(items).findIndex(function(item2) {
        return item2 === focusedItem;
      });
      var selection = _toConsumableArray(listItems).slice(matchedOptionIndex, items.length);
      if (isSource) {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "sourceSelection", props.onSourceSelectionChange);
      } else {
        _onSelectionChange({
          originalEvent: event,
          value: selection
        }, "targetSelection", props.onTargetSelectionChange);
      }
    } else {
      changeFocusedOptionIndex(items.length - 1, type);
    }
    event.preventDefault();
  };
  var findNextOptionIndex = function findNextOptionIndex2(index, type) {
    var listElement = getListElement(type);
    var items = DomHandler.find(listElement, '[data-pc-section="item"]');
    var matchedOptionIndex = _toConsumableArray(items).findIndex(function(link) {
      return link.id === index;
    });
    return matchedOptionIndex > -1 ? matchedOptionIndex + 1 : 0;
  };
  var findPrevOptionIndex = function findPrevOptionIndex2(index, type) {
    var listElement = getListElement(type);
    var items = DomHandler.find(listElement, '[data-pc-section="item"]');
    var matchedOptionIndex = _toConsumableArray(items).findIndex(function(link) {
      return link.id === index;
    });
    return matchedOptionIndex > -1 ? matchedOptionIndex - 1 : 0;
  };
  var changeFocusedOptionIndex = function changeFocusedOptionIndex2(index, type) {
    var listElement = getListElement(type);
    var items = DomHandler.find(listElement, '[data-pc-section="item"]');
    var order;
    if (index >= items.length) {
      order = items.length - 1;
    } else if (index < 0) {
      return;
    } else {
      order = index;
    }
    setFocusedOptionIndex(items[order].getAttribute("id"));
    scrollInViewWithFocus(items[order].getAttribute("id"), type);
  };
  var scrollInViewWithFocus = function scrollInViewWithFocus2(id, type) {
    var listElement = getListElement(type);
    var element = DomHandler.findSingle(listElement, '[data-pc-section="item"][id="'.concat(id, '"]'));
    if (element) {
      element.scrollIntoView && element.scrollIntoView({
        block: "nearest",
        inline: "start"
      });
    }
  };
  var getListElement = function getListElement2(type) {
    return type === "source" ? sourceListElementRef.current.getElement() : targetListElementRef.current.getElement();
  };
  var createStyle = function createStyle2() {
    if (!styleElementRef.current) {
      styleElementRef.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact.nonce, context && context.styleContainer);
      var innerHTML = "\n@media screen and (max-width: ".concat(props.breakpoint, ") {\n    .p-picklist[").concat(attributeSelectorState, "] {\n        flex-direction: column;\n    }\n\n    .p-picklist[").concat(attributeSelectorState, "] .p-picklist-buttons {\n        padding: var(--content-padding);\n        flex-direction: row;\n    }\n\n    .p-picklist[").concat(attributeSelectorState, "] .p-picklist-buttons .p-button {\n        margin-right: var(--inline-spacing);\n        margin-bottom: 0;\n    }\n\n    .p-picklist[").concat(attributeSelectorState, "] .p-picklist-buttons .p-button:last-child {\n        margin-right: 0;\n    }\n}\n");
      styleElementRef.current.innerHTML = innerHTML;
    }
  };
  var destroyStyle = function destroyStyle2() {
    styleElementRef.current = DomHandler.removeInlineStyle(styleElementRef.current);
  };
  React3.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useUpdateEffect(function() {
    if (attributeSelectorState) {
      elementRef.current.setAttribute(attributeSelectorState, "");
      createStyle();
    }
    return function() {
      destroyStyle();
    };
  }, [attributeSelectorState, props.breakpoint]);
  useUpdateEffect(function() {
    if (!props.id && !attributeSelectorState) {
      setAttributeSelectorState(UniqueComponentId());
    }
    if (reorderedListElementRef.current) {
      handleScrollPosition(reorderedListElementRef.current, reorderDirection.current);
      reorderedListElementRef.current = null;
      reorderDirection.current = null;
    }
  });
  useUpdateEffect(function() {
    var _focusedOptionId = focusedOptionIndex !== -1 ? focusedOptionIndex : null;
    setFocusedOptionId(_focusedOptionId);
  }, [focusedOptionIndex]);
  var sourceItemTemplate = props.sourceItemTemplate ? props.sourceItemTemplate : props.itemTemplate;
  var targetItemTemplate = props.targetItemTemplate ? props.targetItemTemplate : props.itemTemplate;
  var rootProps = mergeProps({
    id: attributeSelectorState,
    ref: elementRef,
    className: classNames(props.className, cx("root")),
    style: props.style
  }, PickListBase.getOtherProps(props), ptm("root"));
  return React3.createElement("div", rootProps, props.showSourceControls && React3.createElement(PickListControls, {
    hostName: "PickList",
    list: props.source,
    selection: sourceSelection,
    onReorder: onSourceReorder,
    className: cx("sourceControls"),
    dataKey: props.dataKey,
    moveUpIcon: props.moveUpIcon,
    moveTopIcon: props.moveTopIcon,
    moveDownIcon: props.moveDownIcon,
    moveBottomIcon: props.moveBottomIcon,
    ptm,
    cx,
    unstyled: props.unstyled,
    metaData
  }), React3.createElement(PickListSubList, {
    hostName: "PickList",
    ref: sourceListElementRef,
    type: "source",
    list: sourceList,
    parentId: attributeSelectorState,
    selection: sourceSelection,
    onSelectionChange: function onSelectionChange(e) {
      return _onSelectionChange(e, "sourceSelection", props.onSourceSelectionChange);
    },
    onListKeyDown: function onListKeyDown(e) {
      return _onListKeyDown(e, "source");
    },
    onListFocus: function onListFocus(e) {
      return _onListFocus(e, "source");
    },
    onListBlur: function onListBlur(e) {
      return _onListBlur(e, "source");
    },
    onOptionMouseDown: function onOptionMouseDown(index) {
      return _onOptionMouseDown(index);
    },
    onItemClick: function onItemClick(e) {
      return _onItemClick(e, "source");
    },
    focusedOptionId: focused.source ? focusedOptionId : null,
    ariaActivedescendant: focused.source ? focusedOptionId : null,
    itemTemplate: sourceItemTemplate,
    header: props.sourceHeader,
    style: props.sourceStyle,
    className: cx("listSourceWrapper"),
    listClassName: cx("listSource"),
    metaKeySelection: props.metaKeySelection,
    tabIndex: props.tabIndex,
    dataKey: props.dataKey,
    filterValue: sourceFilteredValue,
    onFilter,
    showFilter: showSourceFilter,
    placeholder: props.sourceFilterPlaceholder,
    filterTemplate: props.sourceFilterTemplate,
    sourceFilterIcon: props.sourceFilterIcon,
    ptm,
    cx,
    focusedList: focused,
    changeFocusedOptionIndex,
    focusOnHover: props.focusOnHover
  }), React3.createElement(PickListTransferControls, {
    hostName: "PickList",
    onTransfer,
    source: props.source,
    visibleSourceList: sourceList,
    target: props.target,
    breakpoint: props.breakpoint,
    visibleTargetList: targetList,
    sourceSelection,
    targetSelection,
    dataKey: props.dataKey,
    moveToTargetIcon: props.moveToTargetIcon,
    moveAllToTargetIcon: props.moveAllToTargetIcon,
    moveToSourceIcon: props.moveToSourceIcon,
    moveAllToSourceIcon: props.moveAllToSourceIcon,
    ptm,
    cx,
    unstyled: props.unstyled,
    metaData
  }), React3.createElement(PickListSubList, {
    hostName: "PickList",
    ref: targetListElementRef,
    type: "target",
    list: targetList,
    selection: targetSelection,
    parentId: attributeSelectorState,
    onSelectionChange: function onSelectionChange(e) {
      return _onSelectionChange(e, "targetSelection", props.onTargetSelectionChange);
    },
    onListKeyDown: function onListKeyDown(e) {
      return _onListKeyDown(e, "target");
    },
    onListFocus: function onListFocus(e) {
      return _onListFocus(e, "target");
    },
    onListBlur: function onListBlur(e) {
      return _onListBlur(e, "target");
    },
    onOptionMouseDown: function onOptionMouseDown(index) {
      return _onOptionMouseDown(index);
    },
    onItemClick: function onItemClick(e) {
      return _onItemClick(e, "target");
    },
    focusedOptionId: focused.target ? focusedOptionId : null,
    ariaActivedescendant: focused.target ? focusedOptionId : null,
    itemTemplate: targetItemTemplate,
    header: props.targetHeader,
    style: props.targetStyle,
    className: cx("listTargetWrapper"),
    listClassName: cx("listWrapper"),
    metaKeySelection: props.metaKeySelection,
    tabIndex: props.tabIndex,
    dataKey: props.dataKey,
    filterValue: targetFilteredValue,
    onFilter,
    showFilter: showTargetFilter,
    placeholder: props.targetFilterPlaceholder,
    filterTemplate: props.targetFilterTemplate,
    targetFilterIcon: props.targetFilterIcon,
    ptm,
    cx,
    focusedList: focused,
    changeFocusedOptionIndex,
    focusOnHover: props.focusOnHover
  }), props.showTargetControls && React3.createElement(PickListControls, {
    hostName: "PickList",
    list: props.target,
    selection: targetSelection,
    onReorder: onTargetReorder,
    className: cx("targetControls"),
    dataKey: props.dataKey,
    moveUpIcon: props.moveUpIcon,
    moveTopIcon: props.moveTopIcon,
    moveDownIcon: props.moveDownIcon,
    moveBottomIcon: props.moveBottomIcon,
    ptm,
    cx,
    unstyled: props.unstyled,
    metaData
  }));
}));
PickList.displayName = "PickList";
export {
  PickList
};
//# sourceMappingURL=primereact_picklist.js.map
